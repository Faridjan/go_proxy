// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package authorize

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OAuthClient is the client API for OAuth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OAuthClient interface {
	Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
}

type oAuthClient struct {
	cc grpc.ClientConnInterface
}

func NewOAuthClient(cc grpc.ClientConnInterface) OAuthClient {
	return &oAuthClient{cc}
}

func (c *oAuthClient) Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/auth.OAuth/Auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OAuthServer is the server API for OAuth service.
// All implementations must embed UnimplementedOAuthServer
// for forward compatibility
type OAuthServer interface {
	Auth(context.Context, *AuthRequest) (*AuthResponse, error)
	mustEmbedUnimplementedOAuthServer()
}

// UnimplementedOAuthServer must be embedded to have forward compatible implementations.
type UnimplementedOAuthServer struct {
}

func (UnimplementedOAuthServer) Auth(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedOAuthServer) mustEmbedUnimplementedOAuthServer() {}

// UnsafeOAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OAuthServer will
// result in compilation errors.
type UnsafeOAuthServer interface {
	mustEmbedUnimplementedOAuthServer()
}

func RegisterOAuthServer(s grpc.ServiceRegistrar, srv OAuthServer) {
	s.RegisterService(&OAuth_ServiceDesc, srv)
}

func _OAuth_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.OAuth/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthServer).Auth(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OAuth_ServiceDesc is the grpc.ServiceDesc for OAuth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OAuth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.OAuth",
	HandlerType: (*OAuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Auth",
			Handler:    _OAuth_Auth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/authorize/authorize.proto",
}
